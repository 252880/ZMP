#include "Set4LibInterfaces.hh"


bool Set4LibInterfaces::init( std::vector<std::string> pluginPaths)
{
  
    std::vector<std::string>::iterator it;

    for(it = pluginPaths.begin(); it < pluginPaths.end(); it++)
      {
	std::shared_ptr<LibInterface> tempLibrary = std::make_shared<LibInterface>();
	if(!tempLibrary->init(*it))
	  {
	    std::cout << "Nie udalo sie zainicjowac biblioteki!!!: "<< *it<< std::endl;
	    return false;
	  }
	Libraries.insert(std::make_pair(tempLibrary->GetCmdName(), tempLibrary));
      }

    return true;

  }
  
  



bool Set4LibInterfaces::execute(std::istringstream &stream)
{
  std::string key;
  std::shared_ptr<LibInterface> handle;
  Interp4Command *command;

  while (stream >> key)
    {
      std::map<std::string, std::shared_ptr<LibInterface>>::iterator iterator = Libraries.find(key);
      if (iterator == Libraries.end())
	{
	  std::cout << "Nie znaleziono wtyczki dla polecenia: " << key << std::endl;
	  return 1;
	}

      handle = iterator->second;
      command = handle->CreateCmd();
      command->ReadParams(stream);
      std::cout << "Polecenie:" << std::endl;
      command->PrintCmd();
      delete command;
    }

  return 0;
}
